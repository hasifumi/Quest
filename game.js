// Generated by CoffeeScript 1.3.3
(function() {
  var BattleScene, FieldScene, JobSelectScene, MessageView, Player, Quest, TitleScene, roundFrame,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  Quest = (function(_super) {

    __extends(Quest, _super);

    Quest.prototype.config = {
      WIDTH: 320,
      HEIGHT: 320,
      FPS: 30,
      IMAGES: ["image/title.png", "image/effect0.gif", "image/graphic.png", "image/player.png", "image/battlebg.png", "image/enemy001.png", "image/enemy021.png", "image/enemy030.png", "image/btleffect001.png", "image/btleffect002.png", "image/btleffect003.png", "image/btleffect004.png", "image/btleffect005.png", "image/btleffect006.png", "image/btleffect007.png", "image/btleffect008.png", "image/btleffect009.png", "image/btleffect010.png"]
    };

    function Quest() {
      var i, j, _i, _j, _len, _len1, _ref;
      Quest.__super__.constructor.call(this, this.config.WIDTH, this.config.HEIGHT);
      _ref = this.config.IMAGES;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        this.preload(i);
      }
      for (_j = 0, _len1 = tiled.length; _j < _len1; _j++) {
        j = tiled[_j];
        this.preload(j.image);
      }
      this.onload = function() {
        this.views = {};
        this.views.message = new MessageView();
        this.scenes = {};
        this.scenes.title = new TitleScene();
        this.scenes.jobSelect = new JobSelectScene();
        this.scenes.field = new FieldScene();
        this.scenes.battle = new BattleScene();
        this.input_t = {};
        this.replaceScene(this.scenes.title);
      };
      this.start();
    }

    return Quest;

  })(Game);

  window.onload = function() {
    return new Quest;
  };

  TitleScene = (function(_super) {

    __extends(TitleScene, _super);

    function TitleScene() {
      var bg, gStartLbl, game, mes;
      TitleScene.__super__.constructor.call(this);
      game = enchant.Game.instance;
      bg = new Sprite(320, 320);
      bg.image = game.assets["image/title.png"];
      this.addChild(bg);
      gStartLbl = new Label("Start Game");
      gStartLbl.x = 50;
      gStartLbl.y = 100;
      gStartLbl.font = "30px fantasy";
      gStartLbl.color = "blue";
      this.addChild(gStartLbl);
      gStartLbl.addEventListener('touchend', function() {
        var _this = this;
        setInterval(function() {
          return bg.opacity -= 0.1;
        }, 100);
        return setTimeout(function() {
          game.replaceScene(game.scenes.field);
          return console.log("touched");
        }, 1000);
      });
      gStartLbl.tl.fadeOut(30).fadeIn(30).loop();
      mes = game.views.message;
      mes.x = 5;
      mes.y = 10;
      mes.setText("Test!</br>Test2!!");
      this.addChild(mes);
    }

    return TitleScene;

  })(Scene);

  JobSelectScene = (function(_super) {

    __extends(JobSelectScene, _super);

    function JobSelectScene() {
      var game, label;
      JobSelectScene.__super__.constructor.call(this);
      game = enchant.Game.instance;
      label = new Label("JOB SELECT");
      label.color = "blue";
      label.x = (game.width / 2) - (label.width / 2);
      label.y = (game.height / 2) - (label.height / 2);
      this.addChild(label);
    }

    return JobSelectScene;

  })(Scene);

  Player = (function(_super) {

    __extends(Player, _super);

    function Player(map) {
      var game,
        _this = this;
      this.map = map;
      Player.__super__.constructor.call(this, 32, 32);
      game = enchant.Game.instance;
      this.image = game.assets["image/player.png"];
      this.frame = 0;
      this.isMoving = false;
      this.direction = 0;
      this.walk = 1;
      this.old_x = this.x;
      this.old_y = this.y;
      this.new_x = this.x;
      this.new_y = this.y;
      this.addEventListener('touchend', function() {
        return console.log("player touched x:" + _this.x + ",y:" + _this.y);
      });
      this.addEventListener('enterframe', function() {
        this.frame = this.direction * 3 + this.walk;
        if (this.isMoving) {
          this.moveBy(this.vx, this.vy);
          if (!(game.frame % 3)) {
            this.walk++;
            this.walk %= 3;
          }
          if (((this.vx !== 0) && (this.x % 32 === 0)) || ((this.vy !== 0) && (this.y % 32 === 0))) {
            this.isMoving = false;
            return this.walk = 1;
          }
        } else {
          this.vx = 0;
          this.vy = 0;
          this.old_x = this.x;
          this.old_y = this.y;
          if (game.input.left) {
            this.direction = 1;
            this.vx = -4;
          } else if (game.input.right) {
            this.direction = 2;
            this.vx = 4;
          } else if (game.input.up) {
            this.direction = 3;
            this.vy = -4;
          } else if (game.input.down) {
            this.direction = 4;
            this.vy = 4;
          }
          if (this.vx || this.vy) {
            if (this.vx) {
              this.new_x = this.x + (this.vx / Math.abs(this.vx) * 32);
            } else {
              this.new_x = this.x;
            }
            if (this.vy) {
              this.new_y = this.y + (this.vy / Math.abs(this.vy) * 32);
            } else {
              this.new_y = this.y;
            }
            if ((0 <= this.new_x) && (this.new_x < this.map.width) && (0 <= this.new_y) && (this.new_y < this.map.height) && !this.map.hitTest(this.new_x, this.new_y)) {
              return this.isMoving = true;
            }
          }
        }
      });
    }

    Player.prototype.setMap = function(map) {
      return this.map = map;
    };

    return Player;

  })(Sprite);

  FieldScene = (function(_super) {

    __extends(FieldScene, _super);

    function FieldScene() {
      var currentMap, currentObject, currentStage, game, i, idx, map_bg, map_fg1, maps, name, objects, pad, player, stages, tmp_stage, value, wk_m_name, _i, _len, _ref,
        _this = this;
      FieldScene.__super__.constructor.call(this);
      game = enchant.Game.instance;
      maps = {};
      objects = {};
      for (idx = _i = 0, _len = tiled.length; _i < _len; idx = ++_i) {
        i = tiled[idx];
        wk_m_name = i.object.mapName.mapName;
        objects[wk_m_name] = {};
        _ref = i.object;
        for (name in _ref) {
          value = _ref[name];
          objects[wk_m_name][name] = value;
          console.log("objects[" + wk_m_name + "][" + name + "] stored");
        }
        maps[wk_m_name] = {};
        if (i.background != null) {
          map_bg = new Map(i.map.tileheight, i.map.tilewidth);
          map_bg.image = game.assets[i.image];
          map_bg.loadData.apply(map_bg, i.background);
          if (i.collision != null) {
            map_bg.collisionData = i.collision;
          }
          maps[wk_m_name].bg = map_bg;
          console.log("maps[" + wk_m_name + "].bg stored");
        }
        if (i.foreground != null) {
          map_fg1 = new Map(i.map.tileheight, i.map.tilewidth);
          map_fg1.image = game.assets[i.image];
          map_fg1.loadData.apply(map_fg1, i.foreground);
          maps[wk_m_name].fg1 = map_fg1;
          console.log("maps[" + wk_m_name + "].fg1 stored");
        }
      }
      stages = {};
      for (name in maps) {
        value = maps[name];
        console.log("stages[" + name + "] stored");
        tmp_stage = new Group();
        if (value.bg != null) {
          tmp_stage.addChild(value.bg);
        }
        if (value.fg1 != null) {
          tmp_stage.addChild(value.fg1);
        }
        stages[name] = tmp_stage;
      }
      currentMap = maps.map3_2.bg;
      currentStage = stages.map3_2;
      currentObject = objects.map3_2;
      player = new Player(currentMap);
      player.setMap(currentMap);
      currentStage.addChild(player);
      player.x = currentObject.playerStartPoint.x;
      player.y = currentObject.playerStartPoint.y;
      this.addChild(currentStage);
      pad = new Pad();
      pad.x = 0;
      pad.y = 220;
      this.addChild(pad);
      this.addEventListener('enter', function(e) {
        return player.isMoving = false;
      });
      this.addEventListener('enterframe', function(e) {
        var o_name, o_object, x, y;
        x = Math.min((game.width - 32) / 2 - player.x, 0);
        y = Math.min((game.height - 32) / 2 - player.y, 0);
        x = Math.max(game.width, x + currentMap.width) - currentMap.width;
        y = Math.max(game.height, y + currentMap.height) - currentMap.height;
        currentStage.x = x;
        currentStage.y = y;
        for (o_name in currentObject) {
          o_object = currentObject[o_name];
          if (player.intersect(o_object)) {
            console.log("currentObject[" + o_name + "]: check");
            switch (o_name) {
              case "goMap1":
              case "goMap2":
                console.log("currentObject[goMap1]: start");
                console.log("o_object.nextMap:" + o_object.nextMap);
                currentStage.removeChild(player);
                _this.removeChild(currentStage);
                _this.removeChild(pad);
                currentMap = maps[o_object.nextMap].bg;
                currentStage = stages[o_object.nextMap];
                currentObject = objects[o_object.nextMap];
                player.setMap(currentMap);
                currentStage.addChild(player);
                player.x = currentObject.playerStartPoint.x;
                player.y = currentObject.playerStartPoint.y;
                _this.addChild(currentStage);
                _this.addChild(pad);
                return;
            }
          }
        }
      });
    }

    return FieldScene;

  })(Scene);

  BattleScene = (function(_super) {

    __extends(BattleScene, _super);

    function BattleScene() {
      var backFS, bg, btlFlg, btnAttack, dpad, flg, mon1, mon2, mon3,
        _this = this;
      BattleScene.__super__.constructor.call(this);
      this.game = enchant.Game.instance;
      bg = new Sprite(320, 240);
      bg.image = this.game.assets["image/battlebg.png"];
      this.addChild(bg);
      btnAttack = new Button("Attack", "light");
      btnAttack.moveTo(0, 200);
      btnAttack.width = 50;
      btnAttack.height = 60;
      btnAttack.addEventListener('touchend', function() {
        return alert("btnAttack height:" + btnAttack.height + ",width:" + btnAttack.width);
      });
      this.addChild(btnAttack);
      dpad = new Pad();
      this.addChild(dpad);
      bg.addEventListener('enterframe', function() {
        if (_this.game.input.left === true) {
          console.log("dpad left");
          _this.x -= 4;
        }
        if (_this.game.input.right === true) {
          console.log("dpad right");
          _this.x += 4;
        }
        if (_this.game.input.up === true) {
          console.log("dpad up");
          _this.y -= 4;
        }
        if (_this.game.input.down === true) {
          return _this.y += 4;
        }
      });
      backFS = new Label("back FieldScene");
      backFS.x = 50;
      backFS.y = 10;
      backFS.color = "red";
      backFS.addEventListener('touchend', function() {
        return _this.game.replaceScene(_this.game.scenes.field);
      });
      this.addChild(backFS);
      mon1 = new Sprite(120, 120);
      mon1.image = this.game.assets["image/enemy001.png"];
      mon1.x = 20;
      mon1.y = 80;
      this.addChild(mon1);
      mon2 = new Sprite(120, 120);
      mon2.image = this.game.assets["image/enemy021.png"];
      mon2.x = 180;
      mon2.y = 80;
      this.addChild(mon2);
      mon3 = new Sprite(320, 150);
      mon3.image = this.game.assets["image/enemy030.png"];
      mon3.x = 0;
      mon3.y = 50;
      this.eft1 = new Sprite(120, 120);
      this.eft1.image = this.game.assets["image/btleffect001.png"];
      this.eft1.x = 180;
      this.eft1.y = 50;
      this.eft1.frameList = [0, 1, 2, 3, 4];
      this.eft1.framIndex = 0;
      btlFlg = false;
      this.frame = 0;
      flg = 0;
      this.addEventListener('enter', function() {
        flg = Math.floor(Math.random() * 5);
        return console.log("0:flg:" + flg);
      });
      this.addEventListener('touchend', function() {
        if (flg % 5 === 1) {
          _this.removeChild(_this.eft1);
          btlFlg = false;
          _this.removeChild(mon1);
          _this.removeChild(mon2);
          _this.addChild(mon3);
          flg = Math.floor(Math.random() * 5);
          return console.log("1:flg:" + flg);
        } else if (flg % 5 === 2) {
          _this.removeChild(_this.eft1);
          btlFlg = false;
          flg = Math.floor(Math.random() * 5);
          return console.log("2:flg:" + flg);
        } else if (flg % 5 === 3) {
          _this.addChild(_this.eft1);
          btlFlg = true;
          _this.rand = Math.floor(Math.random() * 9);
          switch (_this.rand) {
            case 0:
              _this.eft1.image = _this.game.assets["image/btleffect001.png"];
              break;
            case 1:
              _this.eft1.image = _this.game.assets["image/btleffect002.png"];
              break;
            case 2:
              _this.eft1.image = _this.game.assets["image/btleffect003.png"];
              break;
            case 3:
              _this.eft1.image = _this.game.assets["image/btleffect004.png"];
              break;
            case 4:
              _this.eft1.image = _this.game.assets["image/btleffect005.png"];
              break;
            case 5:
              _this.eft1.image = _this.game.assets["image/btleffect006.png"];
              break;
            case 6:
              _this.eft1.image = _this.game.assets["image/btleffect007.png"];
              break;
            case 7:
              _this.eft1.image = _this.game.assets["image/btleffect008.png"];
              break;
            case 8:
              _this.eft1.image = _this.game.assets["image/btleffect009.png"];
              break;
            case 9:
              _this.eft1.image = _this.game.assets["image/btleffect010.png"];
              break;
            default:
              _this.eft1.image = _this.game.assets["image/btleffect001.png"];
          }
          flg = Math.floor(Math.random() * 5);
          console.log("3:flg:" + flg);
          console.log("btlFlg:" + btlFlg);
          return console.log("@rand:" + _this.rand);
        } else {
          _this.removeChild(_this.eft1);
          btlFlg = false;
          _this.removeChild(mon3);
          _this.addChild(mon1);
          _this.addChild(mon2);
          flg = Math.floor(Math.random() * 5);
          return console.log("else:flg:" + flg);
        }
      });
      this.addEventListener('enterframe', function() {
        _this.frame++;
        if (_this.frame % 3 === 0) {
          if (btlFlg) {
            _this.eft1.frame++;
            if (_this.eft1.frame >= _this.eft1.frameList.length) {
              _this.eft1.frame = 0;
              _this.removeChild(_this.eft1);
              return btlFlg = false;
            }
          }
        }
      });
    }

    return BattleScene;

  })(Scene);

  roundFrame = (function(_super) {

    __extends(roundFrame, _super);

    function roundFrame(w, h, lw) {
      var ctx, sp1, sp2, sur1, sur2;
      roundFrame.__super__.constructor.call(this);
      sur1 = new Surface(w, h);
      ctx = sur1.context;
      ctx.fillStyle = "white";
      ctx.rect(0, 0, w, h);
      ctx.fill();
      sp1 = new Sprite(w, h);
      sp1.image = sur1;
      sp1.opacity = 0.4;
      this.addChild(sp1);
      sur2 = new Surface(w - lw * 2, h - lw * 2);
      ctx = sur2.context;
      ctx.fillStyle = "#ff8c00";
      ctx.rect(0, 0, w - lw * 2, h - lw * 2);
      ctx.fill();
      sp2 = new Sprite(w - lw * 2, h - lw * 2);
      sp2.image = sur2;
      sp2.opacity = 0.4;
      sp2.x = lw;
      sp2.y = lw;
      this.addChild(sp2);
    }

    return roundFrame;

  })(Group);

  MessageView = (function(_super) {

    __extends(MessageView, _super);

    function MessageView() {
      var lbl;
      MessageView.__super__.constructor.call(this, 310, 26, 2);
      lbl = new Label("");
      lbl.font = "12px sans-serif";
      lbl.color = "white";
      lbl.x = 5;
      lbl.width = 310 - 5 * 2;
      lbl.height = 24;
      this.addChild(lbl);
      this.setText = function(text) {
        return lbl.text = text;
      };
    }

    MessageView.prototype.setText = function(text) {
      return this.setText(text);
    };

    return MessageView;

  })(roundFrame);

}).call(this);
